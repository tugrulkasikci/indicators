//@version=4
// Super Smoother created by John F. Ehlers
// ATR created by J. Welles Wilder, Jr.
// SuperTrend created by Olivier Seban
// VIDYA and CMO created by Tushar S. Chande
// VORTEX created by Etienne Botes and Douglas Siepman
// Author: Kıvanç Özbilgiç - @kivancozbilgic
// Author and Strategy: Tuğrul Kaşıkcı - @tugrulkasikci

// Inputs
strategy(title="PMax-V SFF BTC", shorttitle="PMax-V SFF BTC", overlay=true, currency="USD", initial_capital=1000, commission_value=0.04, default_qty_type=strategy.percent_of_equity, default_qty_value=100, margin_long=1.35, margin_short=1.35)
src_input = input(hl2, title="Source", group="PMAX")
Periods = input(title="ATR Length", type=input.integer, defval=10, step=10, group="PMAX")
Multiplier = input(title="ATR Multiplier", type=input.float, step=0.5, defval=3, group="PMAX")
mav = input(title="Moving Average Type", defval="VAR", options=["VAR"], group="PMAX")
length =input(30, "Moving Average Length", minval=1, group="PMAX")
changeATR= input(title="Change ATR Calculation Method ?", type=input.bool, defval=true, group="PMAX")
enable_ss_filter = input("ON", title="SS Filter", type=input.string, options=["ON", "OFF"], group="SS FILTER")
ssf_length=input(10, "SSF Length", minval=8, group="SS FILTER")
showsupport = input(title="Show Moving Average?", type=input.bool, defval=true, group="PMAX")
showsignalsk = input(title="Show Crossing Signals?", type=input.bool, defval=true, group="PMAX")

atr2 = sma(tr, Periods)
atr= changeATR ? atr(Periods) : atr2

// SSF
f_ss_filter(src) =>
    pi = 2 * asin(1)
    a = exp(-1.414 * pi / ssf_length)
    b = 2 * a * cos(1.414 * pi / ssf_length)
    c2 = b
    c3 = -a * a
    c1 = 1 - c2 - c3
    ssf = 0.0
    ssf := (c1 * ((src + nz(src[1])) / 2)) + (c2 * nz(ssf[1])) + (c3 * nz(ssf[2]))
    
src = enable_ss_filter == "ON"? f_ss_filter(src_input): src_input

// CMO and VIDYA
Var_Func(src,length)=>
    valpha=2/(length+1)
    vud1=src>src[1] ? src-src[1] : 0
    vdd1=src<src[1] ? src[1]-src : 0
    vUD=sum(vud1,9)
    vDD=sum(vdd1,9)
    vCMO=nz((vUD-vDD)/(vUD+vDD))
    VAR=0.0
    VAR:=nz(valpha*abs(vCMO)*src)+(1-valpha*abs(vCMO))*nz(VAR[1])
VAR=Var_Func(src,length)

getMA(src, length) =>
    ma = 0.0
    if mav == "VAR"
        ma := VAR
        ma
    ma
MAvg=getMA(src, length)

// PMax
Pmax_Func(src,length)=>
    longStop = MAvg - Multiplier*atr
    longStopPrev = nz(longStop[1], longStop)
    longStop := MAvg > longStopPrev ? max(longStop, longStopPrev) : longStop
    shortStop = MAvg + Multiplier*atr
    shortStopPrev = nz(shortStop[1], shortStop)
    shortStop := MAvg < shortStopPrev ? min(shortStop, shortStopPrev) : shortStop
    dir = 1
    dir := nz(dir[1], dir)
    dir := dir == -1 and MAvg > shortStopPrev ? 1 : dir == 1 and MAvg < longStopPrev ? -1 : dir
    PMax = dir==1 ? longStop: shortStop
PMax=Pmax_Func(src,length)

// Draw chart
plot(showsupport ? MAvg : na, color=color.rgb(33, 150, 243, 0), linewidth=2, title="Moving Avg Line")
pALL=plot(PMax, color=color.rgb(255, 82, 82, 0), linewidth=2, title="PMax")

// Signal conditions
buySignalk = crossover(MAvg, PMax)
plotshape(buySignalk and showsignalsk ? PMax*0.995 : na, title="Buy", text="Buy", location=location.absolute, style=shape.labelup, size=size.tiny, color=color.rgb(76, 175, 80, 0), textcolor=color.rgb(255, 255, 255, 0))
sellSignalk = crossunder(MAvg, PMax)
plotshape(sellSignalk and showsignalsk ? PMax*1.005 : na, title="Sell", text="Sell", location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.rgb(255, 82, 82, 0), textcolor=color.rgb(255, 255, 255, 0))
mPlot = plot(ohlc4, title="", style=plot.style_circles, linewidth=0,display=display.none)

// VI
reso = input(defval="D", type=input.resolution, title="Vortex Time Frame", group="TREND FILTER")
// Inputs
run = input(defval=14,minval=1,title="Vortex Length", group="TREND FILTER")
vortex_src = input(type=input.source,defval=close,title="Vortex Source", group="TREND FILTER")
// Positive Slope
L = lowest(run)
rise = vortex_src-L
slope = security(syminfo.tickerid, reso, rise/run)
pre_slope = slope[1]
// Negative Slope
H = highest(run)
inv_rise = H-vortex_src
inv_slope = security(syminfo.tickerid, reso, inv_rise/run)
pre_inv_slope = inv_slope[1]

vortex_long = pre_slope > pre_inv_slope
vortex_short = pre_inv_slope > pre_slope

// Backtest time range
FromDay    = input(defval = 21, title = "From Day", minval = 1, maxval = 31, group="BACKTEST TIME RANGE")
FromMonth  = input(defval = 8, title = "From Month", minval = 1, maxval = 12, group="BACKTEST TIME RANGE")
FromYear   = input(defval = 2021, title = "From Year", minval = 2005, group="BACKTEST TIME RANGE")
ToDay      = input(defval = 1, title = "To Day", minval = 1, maxval = 31, group="BACKTEST TIME RANGE")
ToMonth    = input(defval = 1, title = "To Month", minval = 1, maxval = 12, group="BACKTEST TIME RANGE")
ToYear     = input(defval = 9999, title = "To Year", minval = 2006, group="BACKTEST TIME RANGE")
Start     = timestamp(FromYear, FromMonth, FromDay, 00, 00)
Finish    = timestamp(ToYear, ToMonth, ToDay, 23, 59)
Timerange() =>
    time >= Start and time <= Finish ? true : false

// Max Losing Streak Protection
max_losing_streak = input(title="Max Losing Streak", type=input.integer, defval=7, minval=1, group="STRATEGY STOP LOSS")
new_loss = (strategy.losstrades > strategy.losstrades[1]) and (strategy.wintrades == strategy.wintrades[1]) and (strategy.eventrades == strategy.eventrades[1])
streak_len = 0

streak_len := if (new_loss)
    nz(streak_len[1]) + 1
else
    if (strategy.wintrades > strategy.wintrades[1]) or (strategy.eventrades > strategy.eventrades[1])
        0
    else
        nz(streak_len[1])

ok_to_trade = streak_len < max_losing_streak

// Alert message inputs - UI alert message example = Bot {{exchange}} exhange {{ticker}} pairs {{timenow}} time {{close}} USDT {{strategy.order.alert_message}}
message_long_entry  = input(title = "Long Alert Message", defval="Long Alert Message", group="ALERT MESSAGES")
message_long_close   = input(title = "Close Long Alert Message", defval="Close Long Alert Message", group="ALERT MESSAGES")
message_short_entry = input(title = "Short Alert Message", defval="Short Alert Message", group="ALERT MESSAGES")
message_short_close  = input(title = "Close Short Alert Message", defval="Close Short Alert Message", group="ALERT MESSAGES")
message_mayna = input(title = "Strategy Stop Message", defval="Strategy Stop Message", group="ALERT MESSAGES")

// Max Drawdown Protection
max_drawdown = input(title="Max Drawdown %", type=input.integer, defval=33, minval=1, group="STRATEGY STOP LOSS")
strategy.risk.max_drawdown(value=max_drawdown, type=strategy.percent_of_equity, alert_message = message_mayna)

// Entry orders
if (ok_to_trade and vortex_long and (buySignalk and PMax*0.995))
    strategy.entry(id="LONG", long=true, when=Timerange(), alert_message = message_long_entry)

if (ok_to_trade and vortex_short and (sellSignalk and PMax*1.005))
    strategy.entry(id="SHORT", long=false, when=Timerange(), alert_message = message_short_entry)
    
// Close orders
strategy.close(id="LONG", when=(sellSignalk and PMax*1.005), alert_message = message_long_close)
strategy.close(id="SHORT", when=(buySignalk and PMax*0.995), alert_message = message_short_close)

// Mayna
if (not ok_to_trade)
    strategy.close_all(alert_message = message_mayna)